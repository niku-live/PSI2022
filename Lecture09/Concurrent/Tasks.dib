#!markdown

# Tasks

#!csharp

using System.Diagnostics;
using System.Threading;

Task tVoid = new Task(() => Console.WriteLine("Testing"));

Task<int> tInt = new Task<int>(() => 10);
tInt.Start();

tInt = Task<int>.Factory.StartNew(() => 10);
tInt = Task<int>.Run(() => 10);

var tDouble = Task<double>.Run(() => 10);

//tInt.RunSynchronously();
int r = tInt.Result;

Task<int>[] tasks = new[] { tInt };
var tAny = Task<int>.WhenAny(tasks);
var tAll = Task<int>.WhenAll(tasks);
var tCont = tAll.ContinueWith<int>((r) => 15).ContinueWith((r) => { Console.WriteLine(r); });

#!markdown

# Long Running Methods

#!csharp

static double DoIntensiveCalculations()
{
    double result = 10000d;
    var maxValue = Int32.MaxValue >> 4;
    for (int i = 1; i < maxValue; i++)
    {
        if (i % 2 == 0)
        {
            result /= i;
        }
        else
        {
            result *= i;
        }
    }
    return result;
}

#!markdown

# Sequential Execution

#!csharp

using System.Diagnostics;
using System.Threading;

const int NUMBER_OF_ITERATIONS = 32;

static void RunSequential()
{
    double result = 0d;

    for (int i = 0; i < NUMBER_OF_ITERATIONS; i++)
    {
        result += DoIntensiveCalculations();
    }

    Console.WriteLine("The result is {0}", result);
}

Stopwatch sw = Stopwatch.StartNew();
RunSequential();
Console.WriteLine("{0}ms!", sw.ElapsedMilliseconds);

#!markdown

# Execution using tasks 1

#!csharp

using System.Diagnostics;
using System.Threading;

const int NUMBER_OF_ITERATIONS = 32;

static void RunTasksParallel1()
{
    double result = 0d;
    Task[] tasks = new Task[NUMBER_OF_ITERATIONS];
    
    for (int i = 0; i < NUMBER_OF_ITERATIONS; i++)
    {
        tasks[i] = Task.Run(() => result += DoIntensiveCalculations());
    }
    
    Console.WriteLine("The result is {0}", result);
}

Stopwatch sw = Stopwatch.StartNew();
RunTasksParallel1();
Console.WriteLine("{0}ms!", sw.ElapsedMilliseconds);

#!markdown

# Execution using tasks 2

#!csharp

using System.Diagnostics;
using System.Threading;

const int NUMBER_OF_ITERATIONS = 32;

static void RunTasksParallel2()
{
    double result = 0d;
    Task<double>[] tasks = new Task<double>[NUMBER_OF_ITERATIONS];

    for (int i = 0; i < NUMBER_OF_ITERATIONS; i++)
    {
        tasks[i] = Task.Run(() => DoIntensiveCalculations());
    }
    

    Task.WaitAll(tasks);

    //result = tasks.Sum(t => t.Result);
    foreach (var task in tasks)
    {
        result += task.Result;
    }

    Console.WriteLine("The result is {0}", result);
}

Stopwatch sw = Stopwatch.StartNew();
RunTasksParallel2();
Console.WriteLine("{0}ms!", sw.ElapsedMilliseconds);
